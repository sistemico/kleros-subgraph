#
# Kleros
#

type KlerosSummary @entity {
  " Kleros platform ID "
  id: ID!

  " Current phase "
  currentPhase: Phase

  " The last time the phase was change "
  lastPhaseChange: BigInt

  " Total numbers of courts "
  courtCount: BigInt!

  " Total numbers of disputes "
  disputeCount: BigInt!

  " Total numbers of votes "
  voteCount: BigInt!

  " Total amount of tokens staked in all courts "
  totalStaked: BigDecimal!
}

type Court @entity {
  " Court index "
  id: ID!

  " Court name "
  name: String!

  " Parent court "
  parent: Court

  " Whether to use commit and reveal or not "
  hiddenVotes: Boolean!

  " Minimum tokens needed to stake in the court "
  minStake: BigDecimal!

  " Basis point of tokens that are lost when incoherent "
  alpha: BigInt!

  " Arbitration fee paid per juror "
  feeForJuror: BigDecimal!

  " The appeal after the one that reaches this number of jurors will go to the parent court if any, otherwise, no more appeals are possible "
  jurorsForCourtJump: BigDecimal!

  " Total numbers of disputes on this court "
  disputeCount: BigInt!

  " URI of the court policy "
  policy: String

  " List of child courts "
  children: [Court!] @derivedFrom(field: "parent")

  "All disputes in this court "
  disputes: [Dispute!] @derivedFrom(field: "court")

  " All token stakes in this court "
  stakes: [Stake!] @derivedFrom(field: "court")
}

type Dispute @entity {
  " Dispute ID "
  id: ID!

  " The subcourt the dispute is in "
  court: Court!

  " The number of choices jurors have when voting "
  numberOfChoices: BigInt!

  " Current period "
  period: Period!

  " Address of the dispute's owner "
  owner: Bytes!

  " Total numbers of votes of this dispute "
  voteCount: BigInt!

  " Creation timestamp as seconds "
  created: BigInt!

  " Block number in which the dispute was created "
  createdAtBlock: BigInt!

  " Transaction hash in which the dispute was created "
  createdAtTransaction: Bytes!

  " The last time the period was changed "
  lastPeriodChange: BigInt

  " Timestamp as seconds of most recent action "
  modified: BigInt!

  " Block number at most recent action"
  modifiedAtBlock: BigInt!

  " Transaction hash at most recent action "
  modifiedAtTransaction: Bytes!

  " Dispute votes "
  votes: [Vote!] @derivedFrom(field: "dispute")
}

type Juror @entity {
  " <jurorAddress> "
  id: ID!

  " Juror's account address "
  address: Bytes!

  " Juror's total amount of tokens staked in subcourts "
  stakedTokens: BigDecimal!

  " Juror's total amount of tokens locked in disputes "
  lockedTokens: BigDecimal

  " Last stake timestamp as seconds "
  lastStake: BigInt

  " Block number in which last stake was made "
  lastStakeBlock: BigInt

  " Transaction hash in which last stake was made "
  lastStakeTransaction: Bytes

  " All token stakes made by this juror "
  stakes: [Stake!] @derivedFrom(field: "juror")

  " Juror votes "
  votes: [Vote!] @derivedFrom(field: "juror")
}

type Stake @entity {
  " <courtId>-<jurorAddress>-<timestamp> "
  id: ID!

  " Subcourt at the end of the stake path "
  court: Court!

  " Juror account address "
  juror: Juror!

  " Amount of token staked "
  amount: BigDecimal!

  " Creation timestamp as seconds "
  timestamp: BigInt!

  " Block number in which the stake was set "
  block: BigInt!

  " Transaction hash in which the stake was set "
  transaction: Bytes!
}

type Vote @entity {
  " <disputeId>-<round>-<voteId> "
  id: ID!

  " Dispute ID "
  dispute: Dispute!

  " Juror address "
  juror: Juror!

  " Round index "
  round: BigInt!

  " Vote ID "
  voteId: BigInt!

  " Creation timestamp as seconds "
  created: BigInt!

  " Block number in which the vote was created "
  createdAtBlock: BigInt!

  " Transaction hash in which the vote was created "
  createdAtTransaction: Bytes!
}

" Dispute period "
enum Period {
  " Evidence can be submitted. This is also when drawing has to take place "
  EVIDENCE

  " Jurors commit a hashed vote. This is skipped for courts without hidden votes "
  COMMIT

  " Jurors reveal/cast their vote depending on whether the court has hidden votes or not "
  VOTE

  " The dispute can be appealed "
  APPEAL

  " Tokens are redistributed and the ruling is executed "
  EXECUTION
}

enum Phase {
  " Stake sum trees can be updated. Pass after `minStakingTime` passes and there is at least one dispute without jurors. "
  STAKING

  " Waiting for a random number. Pass as soon as it is ready. "
  GENERATING

  " Jurors can be drawn. Pass after all disputes have jurors or `maxDrawingTime` passes. "
  DRAWING
}

#
# Pinakion
#

type PinakionTransfer @entity {
  id: ID!

  " Quantity of tokens transferred "
  amount: BigDecimal!

  " Address of the source account "
  from: Bytes!

  " Address of the destination account "
  to: Bytes!

  " Block number "
  block: BigInt!

  " Event timestamp "
  timestamp: BigInt!

  " Transaction hash "
  transaction: Bytes!
}
